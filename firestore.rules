rules_version = '2'

service cloud.firestore {
  function isValidUser(user) {
    return user.size() == 5
      && 'github_uid' in user && user.github_uid is string && user.github_uid.size() <= 20
      && 'github_username' in user && user.github_username is string && user.github_username.size() <= 50
      && 'point' in user && user.point is number
      && 'created' in user && user.created is timestamp
      && 'updated' in user && user.updated is timestamp
  }

  function isValidPublicProfile(profile) {
    return profile.size() == 5
      && 'nickname' in profile && profile.nickname is string && profile.nickname.size() <= 128
      && 'thumbnail_url' in profile && profile.thumbnail_url is string && profile.thumbnail_url.size() <= 2048
      && 'score' in profile && profile.score is number
      && 'created' in profile && profile.created is timestamp
      && 'updated' in profile && profile.updated is timestamp
  }

  function isValidPurchase(purchase) {
    return purchase.size() == 6
      && 'task' in purchase && purchase.task is map && purchase.task.size() == 3
        && 'ref' in purchase.task && purchase.task.ref is path
        && 'name' in purchase.task && purchase.task.name is string
        && 'thumbnail_url' in purchase.task && purchase.task.thumbnail_url is string
      && 'task_completed' in purchase && purchase.task_completed is bool
      && 'repo_url' in purchase && purchase.repo_url is string && purchase.repo_url.size() <= 128
      && 'point' in purchase && purchase.point is number
      && 'created' in purchase && purchase.created is timestamp
      && 'updated' in purchase && purchase.updated is timestamp
  }

  function isValidReview(review) {
    return review.size() == 5
      && 'profile' in review && review.profile is map && review.profile.size() == 3
        && 'ref' in review.profile && review.profile.ref is path
        && 'nickname' in review.profile && review.profile.nickname is string
        && 'thumbnail_url' in review.profile && review.profile.thumbnail_url is string
      && 'comment' in review && review.comment is string && review.comment.size() <= 1000
      && 'rating' in review && review.rating is number && 1 <= review.rating && review.rating <= 5
      && 'created' in review && review.created is timestamp
      && 'updated' in review && review.updated is timestamp
  }

  match /databases/{database}/documents {
    function userPath(uid) {
      return /databases/$(database)/documents/users/$(uid)
    }
    function profilePath(uid) {
      return /databases/$(database)/documents/public-profiles/$(uid)
    }
    match /users/{uid} {
      allow get: if request.auth != null && request.auth.uid == uid
      allow create: if request.auth != null && request.auth.uid == uid
        && request.auth.token.firebase.sign_in_provider == 'github.com'
        && isValidUser(request.resource.data)
        && request.resource.data.created == request.time
        && request.resource.data.updated == request.time
        && !exists(profilePath(request.auth.uid))
        && existsAfter(profilePath(request.auth.uid))
    }
    match /users/{uid}/purchases/{task} {
      allow read: if request.auth != null && request.auth.uid == uid
      allow create: if request.auth != null && request.auth.uid == uid
        && isValidPurchase(request.resource.data)
        // && request.resource.data.created == request.time
        // && request.resource.data.updated == request.time
    }
    match /public-profiles/{uid} {
      allow read: if true
      allow create: if request.auth != null && request.auth.uid == uid
        && isValidPublicProfile(request.resource.data)
        && request.resource.data.created == request.time
        && request.resource.data.updated == request.time
        && !exists(userPath(request.auth.uid))
        && existsAfter(userPath(request.auth.uid))
      allow update: if request.auth != null && request.auth.uid == uid
        && isValidPublicProfile(request.resource.data)
        && request.resource.data.created == resource.data.created
        && request.resource.data.updated == request.time
    }
    match /tasks/{task} {
      allow read: if true
      allow create, update: if request.auth != null
    }
    match /tasks/{task}/reviews/{uid} {
      allow read: if true
      allow create: if request.auth != null && request.auth.uid == uid
        && isValidReview(request.resource.data)
        && request.resource.data.created == request.time
        && request.resource.data.updated == request.time
      allow update: if request.auth != null && request.auth.uid == uid
        && isValidReview(request.resource.data)
        && request.resource.data.created == resource.data.created
        && request.resource.data.updated == request.time
    }
  }
}
